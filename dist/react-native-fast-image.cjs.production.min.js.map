{"version":3,"file":"react-native-fast-image.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","resizeMode","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","contain","cover","stretch","center","cacheControl","immutable","web","cacheOnly","priority","low","normal","high","preload","sources","create","overflow","requireNativeComponent","nativeOnly"],"mappings":"8KAcMA,EAA4BC,gBAAcC,cAmHhD,SAASC,SACLC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,WACAC,IAAAA,OACAC,IAAAA,QACAC,IAAAA,UACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,aACAC,WAAAA,aAAa,UACbC,IAAAA,aACGC,mRAEGC,EAAiBC,QAAMC,mBAAmBf,UAIxCgB,gBAACC,QAAKV,MAAO,CAACW,EAAOC,eAAgBZ,GAAQa,IAAKT,GAFtDH,EAGQQ,gBAACF,yBACOF,GACJL,MAAOc,aAAWC,aAClBtB,OAAQa,EACRX,YAAaA,EACbC,WAAYA,EACZC,OAAQA,EACRC,QAASA,EACTC,UAAWA,EACXI,WAAYA,KASpBM,gBAAClB,mBACOc,GACJX,UAAWA,EACXM,MAAOc,aAAWC,aAClBtB,OAAQa,EACRU,qBAAsBrB,EACtBsB,oBAAqBrB,EACrBsB,gBAAiBrB,EACjBsB,iBAAkBrB,EAClBsB,mBAAoBrB,EACpBI,WAAYA,KAjBXD,GAwBjB,IAAMmB,EAAgBC,OAAK9B,GAErB+B,EAA0DC,cAC5D,SAACnB,EAAuBQ,UACpBJ,gBAACY,iBAAcjB,aAAcS,GAASR,OAI9CkB,EAAmBE,YAAc,YASjC,IAAMC,EAC0BH,EAEhCG,EAAUvB,WA1LS,CACfwB,QAAS,UACTC,MAAO,QACPC,QAAS,UACTC,OAAQ,UAwLZJ,EAAUK,aA3KW,CAEjBC,UAAW,YAEXC,IAAK,MAELC,UAAW,aAuKfR,EAAUS,SArLO,CACbC,IAAK,MACLC,OAAQ,SACRC,KAAM,QAoLVZ,EAAUa,QAAU,SAACC,UACjBnD,EAA0BkD,QAAQC,IAEtC,IAAM7B,EAASG,aAAW2B,OAAO,CAC7B7B,eAAgB,CACZ8B,SAAU,YAKZnD,EAAiBoD,yBACnB,gBACAjB,EACA,CACIkB,WAAY,CACR5B,sBAAsB,EACtBC,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,oBAAoB"}